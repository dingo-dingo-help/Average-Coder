using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class King : ChessPieces {


    public override bool[,] PossibleMove()
    {
        bool[,] r = new bool[8, 8];
        //King and Rook Swapping
        ChessPieces c, ca1, ca2;
        int i, j;
        //King and Rook Swapping
        bool[] en = ChessBoardManager.Instance.castlingFlags;

        //topSide
        i = CurrentX - 1;
        j = CurrentY + 1;
        //if (CurrentY != 7)
        //{
            for (int k = 0; k < 3; k++)
            {
                //if (i >= 0 || i < 8)
                if (i != -1 && j != 8 && i != 8)
                {
                    c = ChessBoardManager.Instance.Chessmans[i, j];
                    if (c == null)
                        r[i, j] = true;
                    else if (isWhite != c.isWhite)
                        r[i, j] = true;
                }
                i++;
            }
        //}

        //DownSide
        i = CurrentX - 1;
        j = CurrentY - 1;
        //if (CurrentY != 0)
        //{
            for (int k = 0; k < 3; k++)
            {
                //if (i >= 0 || i < 8)
                if (i != -1 && j != -1 && i != 8)
                {
                    c = ChessBoardManager.Instance.Chessmans[i, j];
                    if (c == null)
                        r[i, j] = true;
                    else if (isWhite != c.isWhite)
                        r[i, j] = true;
                }
                i++;
            }
        //}

        //MiddleLeft
        if (CurrentX != 0)
        {
            c = ChessBoardManager.Instance.Chessmans[CurrentX - 1, CurrentY];
                if (c == null)
                r [CurrentX - 1, CurrentY] = true;
            else if (isWhite != c.isWhite)
                r [CurrentX - 1, CurrentY] = true;

            //King and Rook Swapping###############################################
            if(isWhite)
            {
                if(en[2] == false && en[1] == false)
                {
                    ca1 = ChessBoardManager.Instance.Chessmans[CurrentX - 2, CurrentY];
                    ca2 = ChessBoardManager.Instance.Chessmans[CurrentX - 3, CurrentY];
                    if (c == null && ca1 == null && ca2 == null)
                        r[CurrentX - 2, CurrentY] = true;
                }
            }
            else
            {
                if(en[5] == false && en[4] == false)
                {
                    ca1 = ChessBoardManager.Instance.Chessmans[CurrentX - 2, CurrentY];
                    ca2 = ChessBoardManager.Instance.Chessmans[CurrentX - 3, CurrentY];
                    if (c == null && ca1 == null && ca2 == null)
                        r[CurrentX - 2, CurrentY] = true;
                }
            }
        }

        //MiddleRight
        if (CurrentX != 7)
        {
            c = ChessBoardManager.Instance.Chessmans[CurrentX + 1, CurrentY];
            if (c == null)
                r[CurrentX + 1, CurrentY] = true;
            else if (isWhite != c.isWhite)
                r[CurrentX + 1, CurrentY] = true;

            //King and Rook swapping###############################################
            if (isWhite)
            {
                if(en[2] == false && en[0] == false)
                {
                    ca1 = ChessBoardManager.Instance.Chessmans[CurrentX + 2, CurrentY];
                    if (c == null && ca1 == null)
                        r[CurrentX + 2, CurrentY] = true;
                }
            }
            else
            {
                if(en[5] == false && en[3] == false)
                {
                    ca1 = ChessBoardManager.Instance.Chessmans[CurrentX + 2, CurrentY];
                    if (c == null && ca1 == null)
                        r[CurrentX + 2, CurrentY] = true;
                }
            }
        }

        return r;
    }
}
