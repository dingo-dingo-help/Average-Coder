using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class ChessBoardManager : MonoBehaviour
{

    public static ChessBoardManager Instance { set; get; }
    private bool[,] allowedMoves { set; get; }

    public ChessPieces[,] Chessmans { set; get; }
    private ChessPieces selectedChessPiece;

    private const float TILE_SIZE = 1.0F;
    private const float TILE_OFFSET = 0.5F;

    private int selectionX = -1;
    private int selectionY = -1;

    public int[] enPassantMove { set; get; }

    public List<GameObject> chessPiecesPrefabs;
    private List<GameObject> activeChessPieces = new List<GameObject>();

    public bool isWhiteTurn = true;
    //UI elements for each player
    public GameObject WhiteUI;
    public GameObject BlackUI;
    //Turn count increases after each turn is made
    private int turnCounter = 1;

    private Material previousMat;
    public Material selectedMat;

    //Audio Clips
    public AudioClip StartSound;
    public AudioClip MoveSound;
    public AudioClip SwapSound;
    //Audio Sources
    public AudioSource SoundSource1;
    public AudioSource SoundSource2;
    public AudioSource SoundSource3;

    //King and Rook Swapping###############################################
    public bool[] castlingFlags { set; get; }

    private void Start()
    {
        Instance = this;
        SpawnAllChessPieces();
        //Sounds
        SoundSource1.clip = StartSound;
        SoundSource2.clip = MoveSound;
        SoundSource3.clip = SwapSound;
        //Start Sound
        SoundSource1.Play();
        //King and Rook Swapping###############################################
        castlingFlags = new bool[6];
    }

    private void Update()
    {
        UpdateSelection();
        DrawChessBoard();
        //Random.Range(0,11);
        Debug.Log("Turn Number :" + turnCounter);

        if (Input.GetMouseButtonDown(0))
        {
            if (selectionX >= 0 && selectionY >= 0)
            {
                if (selectedChessPiece == null)
                {
                    SelectChessPiece(selectionX, selectionY);
                }
                else
                {
                    MoveChessPiece(selectionX, selectionY);
                }

            }
        }
        // If turn counter is equal to an odd number it is white, else it is blacks turn
        if(turnCounter % 2 == 1)
        {
            WhiteUI.SetActive(true);
            BlackUI.SetActive(false);
        }
        else
        {
            WhiteUI.SetActive(false);
            BlackUI.SetActive(true);
        }
    }

    private void SelectChessPiece(int x, int y)
    {
        if (Chessmans[x, y] == null)
            return;

        if (Chessmans[x, y].isWhite != isWhiteTurn)
            return;

        bool hasAtleastOneMove = false;
        

        allowedMoves = Chessmans[x, y].PossibleMove();

        for(int i = 0; i < 8; i++)
        {
            for (int j = 0; j < 8; j++)
                if (allowedMoves[i, j])
                    hasAtleastOneMove = true;
        }
        selectedChessPiece = Chessmans[x, y];
        //Sets and resets the material applied to selected pieces
        previousMat = selectedChessPiece.GetComponent<MeshRenderer>().material;
        selectedMat.mainTexture = previousMat.mainTexture;
        selectedChessPiece.GetComponent<MeshRenderer>().material = selectedMat;

        BoardHighlights.Instance.HighLightAllowedMoves(allowedMoves);
    }

    private void MoveChessPiece(int x, int y)
    {
        //selectedChessPiece = selectedChessman in his tutorial
        // same with selectChessman out one is called selectChessPiece
        if (allowedMoves[x,y])
        {
            ChessPieces c = Chessmans[x, y];

            if (c != null && c.isWhite != isWhiteTurn)
            {
                //destory chess piece

                // if its king, win the game
                if (c.GetType() == typeof(King))
                {
                    EndGame();
                    return;
                }
                //King and Rook Swapping###############################################
                if (c.GetType() == typeof(Rook))
                {
                    if (!isWhiteTurn)
                    {
                        if (x == 7 && y == 0)
                        {
                            castlingFlags[0] = true;
                        }
                        else if (x == 0 && y == 0)
                        {
                            castlingFlags[1] = true;
                        }
                    }
                    else
                    {
                        if (x == 7 && y == 7)
                        {
                            castlingFlags[3] = true;
                        }
                        else if (x == 0 && y == 7)
                        {
                            castlingFlags[4] = true;
                        }
                    }
                }

                activeChessPieces.Remove(c.gameObject);
                Destroy(c.gameObject);
                // Swap Sound
                SoundSource3.Play();

            }

            if (x == enPassantMove [0] && y == enPassantMove[1])
            {

                if (isWhiteTurn)
                {
                    c = Chessmans[x, y - 1];
                    activeChessPieces.Remove(c.gameObject);
                    Destroy(c.gameObject);
                    // Swap Sound
                    SoundSource3.Play();
                }
                else
                {
                    c = Chessmans[x, y + 1];
                    activeChessPieces.Remove(c.gameObject);
                    Destroy(c.gameObject);
                    // Swap Sound
                    SoundSource3.Play();
                }
            }

            enPassantMove[0] = -1;
            enPassantMove[1] = -1;

            if (selectedChessPiece.GetType() == typeof(Pawn))
            {
                //Pawn > Queen promotion
                if (y == 7)
                {
                    activeChessPieces.Remove(selectedChessPiece.gameObject);
                    Destroy(selectedChessPiece.gameObject);
                    SpawnChessPieces(1, x, y);
                    selectedChessPiece = Chessmans[x, y];
                    // Swap Sound
                    SoundSource3.Play();
                }
                else if (y == 0)
                {
                    activeChessPieces.Remove(selectedChessPiece.gameObject);
                    Destroy(selectedChessPiece.gameObject);
                    SpawnChessPieces(7, x, y);
                    // Swap Sound
                    SoundSource3.Play();
                }


                // EnPassant 
                if (selectedChessPiece.CurrentY == 1 && y == 3)
                {
                    enPassantMove[0] = x;
                    enPassantMove[1] = y - 1;
                }
                else if (selectedChessPiece.CurrentY == 6 && y == 4)
                {
                    enPassantMove[0] = x;
                    enPassantMove[1] = y + 1;
                }
            
        }
            //King and Rook Swapping###############################################
            Castling(x, y);

            //Chessmans is the array created in the ChessPieces script
            Chessmans[selectedChessPiece.CurrentX, selectedChessPiece.CurrentY] = null;
            selectedChessPiece.transform.position = GetTileCenter(x, y);
            selectedChessPiece.SetPostion(x, y);
            Chessmans[x, y] = selectedChessPiece;
            isWhiteTurn = !isWhiteTurn;
            //Increase Turn count by one after turn is made
            turnCounter++;
            //Move Sound
            SoundSource2.Play();
        }
    
        selectedChessPiece.GetComponent<MeshRenderer>().material = previousMat;
        BoardHighlights.Instance.HideHighLights();
        selectedChessPiece = null;
    }
    //King and Rook Swapping###############################################
    private void Castling(int x, int y)
    {
        if(selectedChessPiece.GetType()== typeof(King)|| selectedChessPiece.GetType() == typeof(Rook))
        {
            if(isWhiteTurn)
            {
                if(selectedChessPiece.CurrentX == 7 && selectedChessPiece.CurrentY == 0)
                {
                    castlingFlags[0] = true;
                }
                else if(selectedChessPiece.CurrentX == 0 && selectedChessPiece.CurrentY == 0)
                {
                    castlingFlags[1] = true;
                }
                else if(selectedChessPiece.CurrentX == 4 && selectedChessPiece.CurrentY == 0)
                {
                    castlingFlags[2] = true;
                }
            }
            else
            {
                if(selectedChessPiece.CurrentX == 7 && selectedChessPiece.CurrentY == 7)
                {
                    castlingFlags[3] = true;
                }
                else if(selectedChessPiece.CurrentX == 0 && selectedChessPiece.CurrentY == 7)
                {
                    castlingFlags[4] = true;
                }
                else if(selectedChessPiece.CurrentX == 4 && selectedChessPiece.CurrentY == 7)
                {
                    castlingFlags[5] = true;
                }

                Chessmans[x, y] = selectedChessPiece;
            }
        }
    }

    private void UpdateSelection()
    {
        if (!Camera.main)
        {
            return;
        }

        RaycastHit hit;
        if (Physics.Raycast(Camera.main.ScreenPointToRay(Input.mousePosition), out hit, 25.0f, LayerMask.GetMask("ChessPlane")))
        {
            selectionX = (int)hit.point.x;
            selectionY = (int)hit.point.z;
        }
        else
        {
            selectionX = -1;
            selectionY = -1;
        }
    }

    private void SpawnChessPieces(int index, int x, int y)
    {
        GameObject go = Instantiate(chessPiecesPrefabs[index], GetTileCenter(x,y) , Quaternion.identity) as GameObject;
        go.transform.SetParent(transform);
        Chessmans[x, y] = go.GetComponent<ChessPieces>();
        Chessmans[x, y].SetPostion(x, y);
        activeChessPieces.Add(go);
    }
    //Duplicate code for knight orientation  -------- Just like the code above but the pieces spawn in a 180
    // EDIT - Now used by all black pieces
    private void SpawnChessPiecesBlack(int index, int x, int y)
    {
        GameObject bo = Instantiate(chessPiecesPrefabs[index], GetTileCenter(x, y), transform.rotation * Quaternion.Euler(0f, 180f, 0f)) as GameObject;
        bo.transform.SetParent(transform);
        Chessmans[x, y] = bo.GetComponent<ChessPieces>();
        Chessmans[x, y].SetPostion(x, y);
        activeChessPieces.Add(bo);
    }

    private Vector3 GetTileCenter(int x, int y)
    {
        Vector3 origin = Vector3.zero;
        origin.x += (TILE_SIZE * x) + TILE_OFFSET;
        origin.z += (TILE_SIZE * y) + TILE_OFFSET;
        return origin;
    }

    private void SpawnAllChessPieces()
    {
        activeChessPieces = new List<GameObject>();
        Chessmans = new ChessPieces[8, 8];
        enPassantMove = new int[2] { -1, -1};

        //Spawn White//

        //King
        SpawnChessPieces(0, 3, 0);
        //Queen
        SpawnChessPieces(1, 4, 0);
        //Rooks
        SpawnChessPieces(2, 0, 0);
        SpawnChessPieces(2, 7, 0);
        //Bishops
        SpawnChessPieces(3, 2, 0);
        SpawnChessPieces(3, 5, 0);
        //Knights
        SpawnChessPieces(4, 1, 0);
        SpawnChessPieces(4, 6, 0);
        //Pawns
        for (int i = 0; i < 8; i++)
        {
            SpawnChessPieces(5, i, 1);
        }
        //Spawn Black//

        //King
        SpawnChessPiecesBlack(6, 4, 7);
        //Queen
        SpawnChessPiecesBlack(7, 3, 7);
        //Rooks
        SpawnChessPiecesBlack(8, 0, 7);
        SpawnChessPiecesBlack(8, 7, 7);
        //Bishops
        SpawnChessPiecesBlack(9, 2, 7);
        SpawnChessPiecesBlack(9, 5, 7);
        //Knights
        SpawnChessPiecesBlack(10, 1, 7);
        SpawnChessPiecesBlack(10, 6, 7);
        //Pawns
        for (int i = 0; i < 8; i++)
        {
            SpawnChessPiecesBlack(11, i, 6);
        }


    }

    private void DrawChessBoard()
    {
        Vector3 WidthLine = Vector3.right * 8;
        Vector3 HeightLine = Vector3.forward * 8;

        for (int i = 0; i <= 8; i++)
        {
            Vector3 start = Vector3.forward * i;
            Debug.DrawLine(start, start + WidthLine);
            for (int j = 0; j <= 8; j++)
            {
                start = Vector3.right * j;
                Debug.DrawLine(start, start + HeightLine);
            }
        }

        if (selectionX >= 0 && selectionY >= 0)
        {
            Debug.DrawLine(
                Vector3.forward * selectionY + Vector3.right * selectionX,
                Vector3.forward * (selectionY + 1) + Vector3.right * (selectionX + 1));

            Debug.DrawLine(
                Vector3.forward * (selectionY + 1) + Vector3.right * selectionX,
                Vector3.forward * selectionY + Vector3.right * (selectionX + 1));
        }

    }


    private void EndGame()
    {
        if (isWhiteTurn)
        {
            Debug.Log("White Wins!");
        }
            
        else
        {
            Debug.Log("Black Wins!");
        }

        foreach (GameObject go in activeChessPieces)
            Destroy(go);
        isWhiteTurn = true;
        BoardHighlights.Instance.HideHighLights();
        SpawnAllChessPieces();
    }






}

